# k8s

1. Check Status of cluster
$kubectl cluster-info


2. explain pods , servics etc to see config file
$ kubectl explain pods --recrsive | less
$ kubectl explain pods --recrsive | grep -A8 envFrom --> show 8 lines from envFrom

2. Create 
$kubectl create -f pod-definition.yml
$kubectl create -f replicaSet-definition.yml
$kubectl create -f ns-definition.yml
$kubectl create -f quota-def.yml
$kubectl create -f config-map.yml





4. Dry run
$kubectl create deployment --image=nginx mynginx --dry-run -o yaml
$kubectl create deployment --image=nginx mynginx --dry-run -o yaml > nginx-dep.yml
$kubectl expose pod myapp-pod --port=6379 --name redis-service --dry-run -o yaml --> Create a Service redis-service type ClusterIP & expose pod on port 6379


5. service
Expose --> This will automatically use the pod's labels as selectors
Create --> This will not use the pods labels as selectors, instead it will assume selectors as app
type -->  "ClusterIP", "ExternalName", "LoadBalancer", "NodePort"

$kubectl expose pod redis-pod --port=6379 --name redis-service
$kubectl expose pod myapp-pod --port=6379 --name redis-service --dry-run -o yaml --> Create a Service redis-service type ClusterIP & expose pod on port 6379
$kubectl expose pod nginx-pod --port=80   --name nginx-service --type=NodePort --dry-run -o yaml
$kubectl -n marketing expose deployment redis --port=6379  --target-port=6379 --name messaging-service --dry-run=client -o yaml > svc.yml



$kubectl create service clusterip redis --tcp=6379:6379 --dry-run -o yaml --> will assume selectors as app=redis
$kubectl create service nodeport  nginx --tcp=80:80 --node-port=30080 --dry-run -o yaml

5. See running objects
$kubectl get pods 
$kubectl get pods -o wide/json/yaml/name
$kubectl get pods --namespace=dev
$kubectl get pods --all-namespaces
$kubectl get pods,svc 

$kubectl get pods --selector bu=finance


$kubectl get services
$kubectl get deployments
$kubectl get storageclass
$kubectl get nodes
$kubectl get all
$kubectl get replicaset / get rs

$kubectl get configMaps
$kubectl get secrets

$kubectl get nodes --show-labels

$kubectl get jobs
$kubectl get CronJob

$kubectl get ingress --all-namespaces



6. Describe objects, detail information
$kubectl describe pods client-pod
$kubectl describe replicaset new-replica-set
$kubectl describe configMaps db-config
$kubectl describe secrets db-secrets

To see master node
$kubectl decribe node kubemaster | grep Taint

7. Delete Objects
$kubectl delete pod <pod> [pod and podsa both work]
$kubectl delete pods <pod>
$kubectl delete -f client-pod.yaml
$kubectl delete deployment client-deployment
$kubectl delete service client-node-port
$kubectl delete replicaset replicaset-1
$kubectl delete rs new-replica-set
$kubectl delete job new-job


8. Logs
$kubectl logs <Pod>
$kubectl logs -f <Pod> --> To stream live logs
$kubectl logs -f <Pod> <container>--> To see logs in a multi container pod



9. execute command or got to shell
$kubectl exec -it client-deployment-6854fd9595-4bq4h sh
$kubectl exec -it ubuntu-sleeper -- date -s '19 APR 2012 11:14:00'
$kubectl exec -it myapp-pod ls /var/run/secrets/kubernetes.io/serviceaccount

Pod.yml
containers:
- 
 command: ["/bin/sh"]
 args: ["-c", "while true; do echo hello; sleep 10;done"]




9. Describe objects - Get detailed info about object
$kubectl describe pods client-pod
$kubectl describe rs client-rs

10. Update using set command
$kubectl set image <Type of object>/<objectName> <Container Name> = <new image to use>
$kubectl set image deployment/client-deployment client=pchandel/multi-client:v5



12. Edit the k8s files
$ kubectl edit pod myapp-pod
$ kubectl edit rs myapp-replicaSet
$ kubectl edit deployment my-deployment

13. Generate pod definition
$ kubectl get pod <pod-name> -o yaml > pod-definition.yaml
$ kubectl get rs new-replica-set -o yaml > myrs.yml

14. Replace configuration
$ kubectl replace -f replicaset-def.yml

15.Scale RS
$ kubectl scale rs my-replica-set --replicas=5 --> using  <Type> and  <Name>


16. Create/Update Objects in K8s using apply

$kubectl apply -f client-pod.yaml
$kubectl apply -f client-node-port.yaml

- Use deployment file
$kubectl apply -f client-deployment.yaml

- To update existing pods, deployments  Change config.yaml → change image name, change replicas etc, use apply command
$Kubectl apply -f updated-config-file.yaml

17. set Context to dev namespace

$kubectl config set-context $(kubectl config current-context) --namespace=dev
$kubectl config set-context --current --namespace=ggckad-s2

18. Security Context

# Can be at Pod or container level
POD
  securityContext: 
    runAsUser: 1000
    runAsGroup: 3000
    fsGroup: 2000
   
  containers:
  - name: sec-ctx-4
    image: gcr.io/google-samples/node-hello:1.0
    securityContext:
      runAsUser: 1000
      capabilities: ------------------> Only at Container Level not at POD
        add: ["NET_ADMIN", "SYS_TIME"] 

18. Taint and toleration
$ kubectl taint nodes node-name key=value:taint-effect --> taint effect : NoSchedule, PreferNoSchedule, NoExecute
$ kubectl taint nodes node01 spray=mortein:NoSchedule --> Add Taint
$ kubectl taint nodes node1 key:NoSchedule-   --> remove with "-"
Add toleration to pod
  tolerations:
  - key: "spray"
    operator: "Equals"
    value: "mortein"
    effect: "NoSchedule"

19. Node selector
$kubectl label nodes node01 size=large -->  Add Label on Node
nodeSelector: --> Add nodeSelector on Pod
 size=large

20. Node affinity
   affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: disktype
            operator: In
            values:
            - ssd        

21. Readiness/Liveness
spec:
  containers:
  - name: goproxy
    image: k8s.gcr.io/goproxy:0.1
    ports:
    - containerPort: 8080
    readinessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 5
      periodSeconds: 10
    livenessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 15
      periodSeconds: 20
  
21. metric server
$kubectl top node
$kubectl top pod
--------------------------------
Imperative Commands
--------------------------------

RUN--

$ kubectl run nginx --image=nginx 
   --restart=Never 
   --port=80 
   --namespace=myname 
   --command 
   --serviceaccount=mysa1 
   --env=HOSTNAME=local 
   --labels=bu=finance,env=dev  
   --requests='cpu=100m,memory=256Mi' 
   --limits='cpu=200m,memory=512Mi' 
   --dry-run=client -o yaml 
   -- /bin/sh -c 'echo hello world'
   
    kubectl run nginx --image=nginx --command -- <cmd> <arg1> ... <argN>

$kubectl run nginx --image ngnix --> creates a dep + pod + rs from an image
$kubectl run nginx-pod --image=nginx:alpine
$kubectl run redis --image redis:alpine -l tier=db
$kubectl run custom-nginx --image nginx --port=8080
$kubectl run httpd --image=httpd:alpine --port=80 --expose
$kubectl run redis --image redis --namespace=finance

$kk run beta-apps --image=nginx --replicas=3 --dry-run -o yaml > betdep.yaml

kubectl run # without flag creates a deployment
kubectl run — restart=Never #Creates a Pod
kubectl run — restart=OnFailure #Creates a job
kubectl run — restart=OnFailure — schedule=”* * * * *” # Creates a cronjob

$kubectl create deployment --image=nginx mynginx --dry-run -o yaml > nginx-dep.yml
$kubectl run yellow --image=redis --restart=Never --dry-run=true -o yaml

-- create temp pod (rm) and run command wget
$kk run busybox101 --image=busybox --restart=Never --rm -it --command  wget 10.1.2.196:80

$kubectl create deployment mynginx --image=nginx  
$kubectl create deployment webapp --image=kodekloud/webapp-color
$kubectl create deployment redis-deploy  --image=redis --namespace=dev-ns

$kubectl create ns dev-ns
$kubectl create namespace dev-ns
$kubectl create namespace ingress-namespace


$kubectl expose pod myapp-pod --port=6379 --name redis-service --type=ClusterIP 
$kubectl expose pod nginx-pod --port=80   --name nginx-service --type=NodePort
$kubectl expose pod redis --port=6379 --name=redis-service

$kubectl create service clusterip redis --tcp=6379:6379 --> will assume selectors as app=redis
$kubectl create service nodeport  nginx --tcp=80:80 --node-port=30080

$kubectl scale rs my-replica-set --replicas=5
$kubectl scale deployment/webapp --replicas=3

-- 
$kubectl create deployment redis-deploy  --image=redis --namespace=dev-ns --dry-run=client -o yaml > redis-deploy.yml
$kubectl apply -f redis-deploy.yml

$ kubectl create configmap webapp-config-map --from-literal=APP_COLOR=darkblue

$ kubectl create secret generic dev-db-secret --from-literal=username=devuser --from-literal=password='S!B\*d$zDsb='
$ kubectl create serviceaccount vsc_account


$ kubectl create secret generic db-secret-xxdf --from-literal=DB_Host=sql01 --from-literal=DB_User=root --from-literal=DB_Password=password123

$ kk create job job1 --image=busybox --dry-run=true -o yaml -- /bin/sh -c 'echo hello; sleep 500'> job.yaml
 

--
$ kubectl label nodes node01 size=large
$ kubectl taint nodes node01 spray=mortein:NoSchedule
 

--
$ kubectl exec app -- cat /log/app.log
$ kubectl exec -it client-deployment-6854fd9595-4bq4h sh
$ kubectl exec -it app -- sh

$ kubectl rollout status deployment/client-deployment
$ kubectl rollout history deployment/client-deployment
$ kubectl rollout undo deployment/client-deployment

---

Updating deployment
1. update image in yaml file and kubectl apply, or
2. kubectl set image deployment/myapp-dep nginx=nginx:1.9.1 

-----
Create -> get -> Update -> Status -> rollback
$kubectl create -f dep.yml / kubectl create deployment nginx --image=nginx:1.16
$kubectl get deployents
$kubectl apply -f dep.yml
$kubectl set image deployment/myapp-dep nginx=nginx:1.12 --record [use record to show that in change clause]

$kubectl rollout status deployment/client-deployment
$kubectl rollout history deployment/client-deployment --revision=2 
$kubectl rollout undo deployment/client-deployment
  -- will undo current verison (v10)
  -- make the version previous to current as current(v9)
  -- before undo v8, v9, v10
  -- so after undo v8, v10, v11(created from v9)
  

-- Check network connectivity
$ kk exec -it mypod -- sh
# nc <destination> <port> 
# nc -v -w 1 myservice 80
# nc -zv nginx-service 80
