# k8s

1. Check Status of cluster
$kubectl cluster-info


2. explain pods , servics etc to see config file
$ kubectl explain pods --recrsive | less
$ kubectl explain pods --recrsive | grep -A8 envFrom --> show 8 lines from envFrom

2. Create 
$kubectl create -f pod-definition.yml
$kubectl create -f replicaSet-definition.yml
$kubectl create -f ns-definition.yml
$kubectl create -f quota-def.yml
$kubectl create -f config-map.yml


3. Imperative commands
$kubectl run nginx --image ngnix 
$kubectl run nginx-pod --image=nginx:alpine
$kubectl run redis --image redis:alpine -l tier=db
$kubectl run custom-nginx --image nginx --port=8080
$kubectl run httpd --image=httpd:alpine --port=80 --expose
$kubectl run redis --image redis --namespace=finance


$kubectl create deployment mynginx --image=nginx  
$kubectl create deployment webapp --image=kodekloud/webapp-color
$kubectl create deployment redis-deploy  --image=redis --namespace=dev-ns

$kubectl create ns dev-ns
$kubectl create namespace dev-ns


$kubectl expose pod myapp-pod --port=6379 --name redis-service --type=ClusterIP 
$kubectl expose pod nginx-pod --port=80   --name nginx-service --type=NodePort
$kubectl expose pod redis --port=6379 --name=redis-service

$kubectl create service clusterip redis --tcp=6379:6379 --> will assume selectors as app=redis
$kubectl create service nodeport  nginx --tcp=80:80 --node-port=30080

$kubectl scale rs my-replica-set --replicas=5
$kubectl scale deployment/webapp --replicas=3

-- 
$kubectl create deployment redis-deploy  --image=redis --namespace=dev-ns --dry-run=client -o yaml > redis-deploy.yml
$kubectl apply -f redis-deploy.yml

$ kubectl create configmap webapp-config-map --from-literal=APP_COLOR=darkblue

$ kubectl create secret generic db-secret :iteral DB_Password=password123
$ kubectl create serviceaccount vsc_account


4. Dry run
$kubectl create deployment --image=nginx mynginx --dry-run -o yaml
$kubectl create deployment --image=nginx mynginx --dry-run -o yaml > nginx-dep.yml
$kubectl expose pod myapp-pod --port=6379 --name redis-service --dry-run -o yaml --> Create a Service redis-service type ClusterIP & expose pod on port 6379


5. service
Expose --> This will automatically use the pod's labels as selectors
Create --> This will not use the pods labels as selectors, instead it will assume selectors as app
type -->  "ClusterIP", "ExternalName", "LoadBalancer", "NodePort"

$kubectl expose pod redis-pod --port=6379 --name redis-service
$kubectl expose pod myapp-pod --port=6379 --name redis-service --dry-run -o yaml --> Create a Service redis-service type ClusterIP & expose pod on port 6379
$kubectl expose pod nginx-pod --port=80   --name nginx-service --type=NodePort --dry-run -o yaml

$kubectl create service clusterip redis --tcp=6379:6379 --dry-run -o yaml --> will assume selectors as app=redis
$kubectl create service nodeport  nginx --tcp=80:80 --node-port=30080 --dry-run -o yaml

5. See running objects
$kubectl get pods 
$kubectl get pods -o wide/json/yaml/name
$kubectl get pods --namespace=dev
$kubectl get pods --all-namespaces
$kubectl get pods,svc 

$kubectl get services
$kubectl get deployments
$kubectl get storageclass
$kubectl get nodes
$kubectl get all
$kubectl get replicaset / get rs

$kubectl get configMaps
$kubectl get secrets


6. Describe objects, detail information
$kubectl describe pods client-pod
$kubectl describe replicaset new-replica-set
$kubectl describe configMaps db-config
$kubectl describe secrets db-secrets

To see master node
$kubectl decribe node kubemaster | grep Taint

7. Delete Objects
$kubectl delete pod <pod> [pod and podsa both work]
$kubectl delete pods <pod>
$kubectl delete -f client-pod.yaml
$kubectl delete deployment client-deployment
$kubectl delete service client-node-port
$kubectl delete replicaset replicaset-1
$kubectl delete rs new-replica-set

8. Logs
$kubectl logs <Pod>

9. execute command or got to shell
$kubectl exec -it client-deployment-6854fd9595-4bq4h sh
$kubectl exec -it ubuntu-sleeper -- date -s '19 APR 2012 11:14:00'
$kubectl exec -it myapp-pod ls /var/run/secrets/kubernetes.io/serviceaccount


9. Describe objects - Get detailed info about object
$kubectl describe pods client-pod
$kubectl describe rs client-rs

10. Update using set command
$kubectl set image <Type of object>/<objectName> <Container Name> = <new image to use>
$kubectl set image deployment/client-deployment client=pchandel/multi-client:v5



12. Edit the k8s files
$ kubectl edit pod myapp-pod
$ kubectl edit rs myapp-replicaSet
$ kubectl edit deployment my-deployment

13. Generate pod definition
$ kubectl get pod <pod-name> -o yaml > pod-definition.yaml
$ kubectl get rs new-replica-set -o yaml > myrs.yml

14. Replace configuration
$ kubectl replace -f replicaset-def.yml

15.Scale RS
$ kubectl scale rs my-replica-set --replicas=5 --> using  <Type> and  <Name>


16. Create/Update Objects in K8s using apply

$kubectl apply -f client-pod.yaml
$kubectl apply -f client-node-port.yaml

- Use deployment file
$kubectl apply -f client-deployment.yaml

- To update existing pods, deployments  Change config.yaml â†’ change image name, change replicas etc, use apply command
$Kubectl apply -f updated-config-file.yaml

17. set Context to dev namespace
$kubectl config set-context $(kubectl config current-context) --namespace=dev


18. taint and toleration
$ kubectl taint nodes node-name key=value:taint-effect --> taint effect : NoSchedule, PreferNoSchedule, NoExecute
$ kubectl taint nodes node01 spray=mortein:NoSchedule --> Add Taint
$ kubectl taint nodes node1 key:NoSchedule-   --> remove with "-"
Add toleration to pod
  tolerations:
  - key: "spray"
    operator: "Equals"
    value: "mortein"
    effect: "NoSchedule"
  
 



